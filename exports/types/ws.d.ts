import ClientConnection from 'socket-request-client/connection';
export default class Client {
    url: string;
    networkVersion: string;
    client: ClientConnection;
    constructor(url?: string, networkVersion?: string);
    init(): Promise<void>;
    get pubsub(): {
        publish: (topic: string, value: any) => Promise<any>;
        subscribe: (topic: string, cb: any) => Promise<any>;
    };
    request(url: string, params?: {}): Promise<any>;
    balances(): Promise<any>;
    balanceOf(address: string, format: boolean): Promise<any>;
    selectedAccount(): Promise<any>;
    selectAccount(address: any): Promise<any>;
    accounts(): Promise<any>;
    hasTransactionToHandle(): Promise<any>;
    getBlock(index: number): Promise<any>;
    blocks(amount: number): Promise<any>;
    sendTransaction(transaction: any): Promise<any>;
    peerId(): Promise<any>;
    peers(): Promise<any>;
    validators(): Promise<any>;
    lookup(name: string): Promise<any>;
    staticCall(contract: string, method: string, params: {}): Promise<any>;
    nativeBurns(): Promise<number>;
    contracts(): Promise<number>;
    nativeMints(): Promise<number>;
    nativeToken(): Promise<string>;
    nativeTransfers(): Promise<number>;
    totalSize(): Promise<number>;
    totalTransactions(): Promise<number>;
    poolTransactions(): Promise<any>;
    transactionsInPool(): Promise<any>;
    transactionPoolSize(): Promise<any>;
    totalBlocks(): Promise<number>;
    nativeCalls(): Promise<number>;
    participating(): Promise<boolean>;
    participate(address: string): {};
    createContractAddress(owner: string, code: string, params: {}): {};
    deployContract(code: string, params: {}): {};
    network(): Promise<any>;
    networkStats(): Promise<{
        version: string;
        peers: {}[];
        accounts: number;
        accountsHolding: number;
    }>;
    getNonce(address: string): Promise<any>;
    lastBlock(): Promise<any>;
    blockHashMap(): Promise<any>;
    bootstrap(): Promise<any>;
}
